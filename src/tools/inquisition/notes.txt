


Heuristics:
The "interface" is the connection between the two stacks, currently
	implemented as the difference between the topmost numbers of the two stacks.
Disapproving the interface seems like a good thing in any situation.
A "gap" is a sequence in which a number is missing.
		Example: 1 3 (in stack A)
Disapproving gaps should cause the algorithm to finely sort numbers.
	It may be detrimental to have active at the start of sorting.
A "break" is a sequence in which two numbers follow in the wrong order.
		Example: 2 1 (in stack A)
Tracking breaks might be less effective than tracking fractures,
	because inverting a part of the list is not that expensive compared to
	braiding two gapped lists together (at least on stack B).
A "fracture" is a reversal in the order in which a stack is sorted.
		Example: 4 5 6 3 2 1
Removing fractures makes a stack easier to sort, but disapproving it becomes
	counterproductive once a few cohesive lists have popped up, because to
	remove a fracture in that situation, some temporary ones need to be created,
	and that would cause peaks in the disapproval graph.
The "reach" is the idea of disapprovable items in the middle of the stack
	weighing more heavily than at the edges, as only the edges of the stacks
	can be manipulated. Useful to apply on any fault that can be directly solved
	Should be additive, not multiplicative.

Simple cost (in moves) per fault.
	Should be very stable.

Technoblade:
	Assertive, should try to prioritize short-term improvement,
	while (somehow) not sacrificing long-term sustainability.
	Similar to what I've been trying to build in the deprecated file.
	Possible algorithm: neighbour-search.
	Disapprove distance to neighbours.

Eskarina:
	Intelligent, should disapprove fractures in a complex manner.
	Reach + distance to intended position in sublist?
	May well be interesting.
	Ideally, something that can swap or braid entire sublists at a time,
	while still being capable of sorting fully random lists.
	Iterate down the isle, distance of next island/item? to its position
	within the current island

Gossman:
	Timid, should run away from perceived "obstacles"
	Achievable by only looking at range cohesion (viscosity)? Expensive, though.

Cell function specifications:
--Takes current value, stack count, stack size, and a mode (either A or B)
--__Any other values can be inferred with static variables.
--Will be given END_OF_STACK once the end of the stack is reached.
--Returns an unsigned long (t_dpp) value that represents sorting cost per entry.
--__Should always sum 0 when the stack is perfectly sorted.
//bad idea, didn't work


// //Arithmetic function to properly map absolute difference to circular difference
// static inline t_uint	wrap_dif(t_uint dif, t_uint size)
// {
// 	return (
// 		(dif <= (size / 2)) * dif
// 		+ (dif > (size / 2)) * (size - dif)
// 		);
// }

// //Equation specifications:
// //--Takes the amount of entries in a stack, and the position of the query point.
// //--Returns a value that is higher the closer i is to count / 2.
// //--Is folly.
// static inline t_ulong	get_reach(t_uint size, t_uint i)
// {
// 	const t_ulong	step_height = (MAX_OUTREACH_COST / (size / 2));
// 	const t_ulong	current_step = (wrap_dif(i, size) + 1) * step_height;

// 	return (BASE_REACH_COST + current_step);
// }

// static inline t_ulong	test_comb(t_uint left, t_uint right,
// 	t_ulong reach, t_uint size)
// {
// 	t_ulong			disapproval;

// 	disapproval = 0;
// 	if (left + 1 < right)
// 	{
// 		disapproval += wrap_dif(right - (left + 1), size)
// 			* GAP_INCREMENT * BASE_REACH_COST;
// 		disapproval -= GAP_ALLOTMENT * BASE_REACH_COST;
// 	}
// 	else if (left + 1 > right)
// 	{
// 		disapproval += wrap_dif((left + 1) - right, size)
// 			* BREAK_INCREMENT * reach;
// 		disapproval -= BREAK_ALLOTMENT * reach;
// 	}
// 	return (disapproval);
// }

// //Algorithm specifications:
// //--Takes one stack, and the total amount of integers in both stacks.
// //--Returns a disapproval rating which is lower the easier to sort the input
// //		stack is, and 0 if perfectly sorted.
// //--_-Returns EMPTY_DISAPPROVAL if the stack is empty.
// //--Should show smooth improvement within 6-8 instructions.
// //--Speed is paramount.

// //Simple cost (in moves) per entry.
// //	Should be very stable.

// //O(n) = n

// //Arithmetic function to properly map absolute difference to circular difference
// static inline t_uint	wrap_dif(t_uint dif, t_uint size)
// {
// 	return (
// 		(dif <= (size / 2)) * dif
// 		+ (dif > (size / 2)) * (size - dif)
// 		);
// }

// //Equation specifications:
// //--Takes the amount of entries in a stack, and the position of the query point.
// //--Returns a value that is higher the closer i is to count / 2.
// static inline t_ulong	get_reach(t_uint size, t_uint i)
// {
// 	const t_ulong	step_height = (MAX_OUTREACH_COST / (size / 2));
// 	const t_ulong	current_step = (wrap_dif(i, size) + 1) * step_height;

// 	return (BASE_REACH_COST + current_step);
// }

// static inline t_ulong	test_comb(t_uint left, t_uint right,
// 	t_ulong reach, t_uint size)
// {
// 	t_ulong			disapproval;

// 	disapproval = 0;
// 	if (left + 1 < right)
// 	{
// 		disapproval += wrap_dif(right - (left + 1), size)
// 			* GAP_INCREMENT * BASE_REACH_COST;
// 		disapproval -= GAP_ALLOTMENT * BASE_REACH_COST;
// 	}
// 	else if (left + 1 > right)
// 	{
// 		disapproval += wrap_dif((left + 1) - right, size)
// 			* BREAK_INCREMENT * reach;
// 		disapproval -= BREAK_ALLOTMENT * reach;
// 	}
// 	return (disapproval);
// }

// //Algorithm specifications:
// //--Takes one stack, and the total amount of integers in both stacks.
// //--Returns a disapproval rating which is lower the easier to sort the input
// //		stack is, and 0 if perfectly sorted.
// //--_-Returns EMPTY_DISAPPROVAL if the stack is empty.
// //--Should show smooth improvement within 6-8 instructions.
// //--Speed is paramount.
// static inline t_ulong	get_disapproval(t_stack *stack, t_uint size, t_dir dir)
// {
// 	t_uint	current;
// 	t_uint	next;
// 	t_ulong	disapproval;
// 	t_uint	i;
// 	t_ulong	reach;

// 	if (__builtin_expect(stack->start == END_OF_STACK, 0))
// 		return (EMPTY_DISAPPROVAL);
// 	current = stack->start;
// 	disapproval = wrap_dif(stack->start, size);
// 	i = 0;
// 	while (__builtin_expect(current != stack->end, 1))
// 	{
// 		next = stack->val[current] & STACK_RIGHT;
// 		reach = get_reach(stack->count, i++);
// 		if (dir == STACK_A)
// 			disapproval += test_comb(current, next, reach, size);
// 		else if (dir == STACK_B) 
// 			disapproval += test_comb(next, current, reach, size) + B_DISAPPROVAL;
// 		current = next;
// 	}
// 	reach = get_reach(stack->count, i);
// 	if (current != stack->end && dir == STACK_A)
// 		disapproval += test_comb(stack->end, stack->start, reach, size);
// 	else if (current != stack->end)
// 		disapproval += test_comb(stack->start, stack->end, reach, size);
// 	return (disapproval);
// }

// t_ulong	inquisit(t_stack *a, t_stack *b, t_uint size)
// {
// 	const t_ulong	disapproval_a = get_disapproval(a, size, STACK_A);
// 	const t_ulong	disapproval_b = get_disapproval(b, size, STACK_B);
// 	t_ulong			out;

// 	out = disapproval_a;
// 	if (__builtin_expect(disapproval_b != EMPTY_DISAPPROVAL && disapproval_a != EMPTY_DISAPPROVAL, 0))
// 	{
// 		out += disapproval_b;
// 		if (a->start + 1 != (a->val[a->start] & STACK_RIGHT))
// 		{
// 			if (a->start > b->start + INTERFACE_GRACE)
// 				out += wrap_dif((a->start - b->start) - INTERFACE_GRACE, size)
// 					* INTERFACE_INCREMENT * BASE_REACH_COST;
// 			else if (b->start > a->start + INTERFACE_GRACE)
// 				out += wrap_dif((b->start - a->start) - INTERFACE_GRACE, size)
// 					* INTERFACE_INCREMENT * BASE_REACH_COST;
// 		}
// 		else
// 			out += (size / INTERFACE_DISGRACE) * BASE_REACH_COST;
		
// 	}
// 	return (out);
// }

// // static inline t_ulong	test_disapproval(t_uint left, t_uint right)
// // {
// // 	t_ulong			disapproval;
// // 	t_ulong			gap_dis;
// // 	t_ulong			gap_inc;
// // 	t_ulong			break_dis;
// // 	static t_uint	i = 0;

// // 	disapproval = 0;
// // 	gap_dis = 0;
// // 	gap_inc = 0;
// // 	break_dis = 0;
// // 	disapproval += (left + 1 < right) * GAP_DISAPPROVAL;
// // 	gap_dis += (left + 1 < right) * GAP_DISAPPROVAL;
// // 	disapproval += (left + 1 < right) * (right - (left + 1)) * GAP_INCREMENT;
// // 	gap_inc += (left + 1 < right) * (right - (left + 1)) * GAP_INCREMENT;
// // 	disapproval += (left + 1 > right) * BREAK_DISAPPROVAL;
// // 	break_dis += (left + 1 > right) * BREAK_DISAPPROVAL;
// // 	if (disapproval)
// // 	{
// // 		ft_printf("\n__i: %u\n", i);
// // 		ft_printf("__--Gap: %p\n", gap_dis + gap_inc);
// // 		ft_printf("__--Break: %p\n", break_dis);
// // 	}// static inline t_ulong	get_reach(t_uint size, t_uint i)
// // {
// // 	const t_ulong	step_size = (size / MAX_OUTREACH_COST) + 1;
// // 	t_ulong			current_step;

// // 	if (i <= (size >> 1))
// // 		current_step = i / step_size;
// // 	else
// // 		current_step = (size - i) / step_size;
// // 	return (BASE_REACH_COST + current_step);
// // }
// // 	t_uint	i;

// // 	if (a->start == END_OF_STACK)
// // 		return (EMPTY_DISAPPROVAL);
// // 	current = a->start;
// // 	if (a->start < size / 2)
// // 		disapproval = a->start;
// // 	else
// // 		disapproval = size - a->start + 1;
// // 	ft_printf("\n--Start: %p\n", disapproval);
// // 	i = 0;
// // 	while (current != a->end)
// // 	{
// // 		disapproval += test_disapproval(current, a->val[current] & STACK_RIGHT)
// // 			* (1 + (OUTREACH_COST * (i > REACH || size - i > REACH)));
// // 		if ((OUTREACH_COST * (i > REACH || size - i > REACH)))
// // 			ft_printf("  ^*2^!\n");
// // 		current = a->val[current] & STACK_RIGHT;
// // 		i++;
// // 	}
// // 	return (disapproval);
// // }

// // static inline t_ulong	get_reach(t_uint count, int i)
// // {
// // 	const int	p = count >> 1;
// // 	const int	p2c = (p * p) + BASE_REACH_COST;
// // 	const int	x_p = i - p;
// // 	const int	ax2 = REACH_ANGLE * (x_p * x_p);

// // 	return (ax2 + p2c);
// // }

// // static inline t_ulong	get_reach(t_uint size, t_uint i)
// // {
// // 	static const t_ulong	max_reach = MAX_DEPTH / 2 - 1;

// // 	if (i <= (size >> 1) && i > max_reach)
// // 		return (BASE_REACH_COST + MAX_OUTREACH_COST);
// // 	else if ((size - i) > max_reach)
// // 		return (BASE_REACH_COST + MAX_OUTREACH_COST);
// // 	return (BASE_REACH_COST);
// // }
// 	if (__builtin_expect(stack->start == END_OF_STACK, 0))
// 		return (EMPTY_DISAPPROVAL);
// 	current = stack->start;
// 	disapproval = wrap_dif(stack->start, size);
// 	i = 0;
// 	while (__builtin_expect(current != stack->end, 1))
// 	{
// 		next = stack->val[current] & STACK_RIGHT;
// 		reach = get_reach(stack->count, i++);
// 		if (dir == STACK_A)
// 			disapproval += test_comb(current, next, reach, size);
// 		else if (dir == STACK_B) 
// 			disapproval += test_comb(next, current, reach, size) + B_DISAPPROVAL;
// 		current = next;
// 	}
// 	reach = get_reach(stack->count, i);
// 	if (current != stack->end && dir == STACK_A)
// 		disapproval += test_comb(stack->end, stack->start, reach, size);
// 	else if (current != stack->end)
// 		disapproval += test_comb(stack->start, stack->end, reach, size);
// 	return (disapproval);
// }

// t_ulong	inquisit(t_stack *a, t_stack *b, t_uint size)
// {
// 	const t_ulong	disapproval_a = get_disapproval(a, size, STACK_A);
// 	const t_ulong	disapproval_b = get_disapproval(b, size, STACK_B);
// 	t_ulong			out;

// 	out = disapproval_a;
// 	if (__builtin_expect(disapproval_b != EMPTY_DISAPPROVAL && disapproval_a != EMPTY_DISAPPROVAL, 0))
// 	{
// 		out += disapproval_b;
// 		if (a->start + 1 != (a->val[a->start] & STACK_RIGHT))
// 		{
// 			if (a->start > b->start + INTERFACE_GRACE)
// 				out += wrap_dif((a->start - b->start) - INTERFACE_GRACE, size)
// 					* INTERFACE_INCREMENT * BASE_REACH_COST;
// 			else if (b->start > a->start + INTERFACE_GRACE)
// 				out += wrap_dif((b->start - a->start) - INTERFACE_GRACE, size)
// 					* INTERFACE_INCREMENT * BASE_REACH_COST;
// 		}
// 		else
// 			out += (size / INTERFACE_DISGRACE) * BASE_REACH_COST;
		
// 	}
// 	return (out);
// }

// // static inline t_ulong	test_disapproval(t_uint left, t_uint right)
// // {
// // 	t_ulong			disapproval;
// // 	t_ulong			gap_dis;
// // 	t_ulong			gap_inc;
// // 	t_ulong			break_dis;
// // 	static t_uint	i = 0;

// // 	disapproval = 0;
// // 	gap_dis = 0;
// // 	gap_inc = 0;
// // 	break_dis = 0;
// // 	disapproval += (left + 1 < right) * GAP_DISAPPROVAL;
// // 	gap_dis += (left + 1 < right) * GAP_DISAPPROVAL;
// // 	disapproval += (left + 1 < right) * (right - (left + 1)) * GAP_INCREMENT;
// // 	gap_inc += (left + 1 < right) * (right - (left + 1)) * GAP_INCREMENT;
// // 	disapproval += (left + 1 > right) * BREAK_DISAPPROVAL;
// // 	break_dis += (left + 1 > right) * BREAK_DISAPPROVAL;
// // 	if (disapproval)
// // 	{
// // 		ft_printf("\n__i: %u\n", i);
// // 		ft_printf("__--Gap: %p\n", gap_dis + gap_inc);
// // 		ft_printf("__--Break: %p\n", break_dis);
// // 	}// static inline t_ulong	get_reach(t_uint size, t_uint i)
// // {
// // 	const t_ulong	step_size = (size / MAX_OUTREACH_COST) + 1;
// // 	t_ulong			current_step;

// // 	if (i <= (size >> 1))
// // 		current_step = i / step_size;
// // 	else
// // 		current_step = (size - i) / step_size;
// // 	return (BASE_REACH_COST + current_step);
// // }
// // 	t_uint	i;

// // 	if (a->start == END_OF_STACK)
// // 		return (EMPTY_DISAPPROVAL);
// // 	current = a->start;
// // 	if (a->start < size / 2)
// // 		disapproval = a->start;
// // 	else
// // 		disapproval = size - a->start + 1;
// // 	ft_printf("\n--Start: %p\n", disapproval);
// // 	i = 0;
// // 	while (current != a->end)
// // 	{
// // 		disapproval += test_disapproval(current, a->val[current] & STACK_RIGHT)
// // 			* (1 + (OUTREACH_COST * (i > REACH || size - i > REACH)));
// // 		if ((OUTREACH_COST * (i > REACH || size - i > REACH)))
// // 			ft_printf("  ^*2^!\n");
// // 		current = a->val[current] & STACK_RIGHT;
// // 		i++;
// // 	}
// // 	return (disapproval);
// // }

// // static inline t_ulong	get_reach(t_uint count, int i)
// // {
// // 	const int	p = count >> 1;
// // 	const int	p2c = (p * p) + BASE_REACH_COST;
// // 	const int	x_p = i - p;
// // 	const int	ax2 = REACH_ANGLE * (x_p * x_p);

// // 	return (ax2 + p2c);
// // }

// // static inline t_ulong	get_reach(t_uint size, t_uint i)
// // {
// // 	static const t_ulong	max_reach = MAX_DEPTH / 2 - 1;

// // 	if (i <= (size >> 1) && i > max_reach)
// // 		return (BASE_REACH_COST + MAX_OUTREACH_COST);
// // 	else if ((size - i) > max_reach)
// // 		return (BASE_REACH_COST + MAX_OUTREACH_COST);
// // 	return (BASE_REACH_COST);
// // }